{
	"id": "78583d6c2717389cdf5e8dda8aab1617",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/identity.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity>=0.5.0<0.9.0;\n\n//state variables declaration below\n\ncontract test{\n\n    /*string name; //state variables\n    uint age;\n\n    constructor(){\n        name=\"asfund\";\n        age=20;\n    }\n\n    /*function getname() public view returns(string memory){\n        return name;\n    }\n    function getage() public view returns(uint){\n        return age;\n    }\n\n    //local variables declration below.\n    //string variables by default stored on chain that is it is declared \n    //in contract level by default.if we want to declare in funtion we use string memory.\n\n    function setNum() public pure returns(uint){\n       // string memory school=\"djps\";\n        uint num=11;        //local variables\n        return num;\n    \n\n    //setter and getter functions\n    //in getter we use view returns because there is no change in values\n    //if we use public in state variables then we dont need to creat getter function\n\n    function getter() public view returns(uint){\n        return age;\n    }\n    //in setter we dont use view returns  because we change values\n\n    function setter(uint num) public{\n        age=num;\n\n    }\n\n    //fixed sized array\n    uint[3] public students=[1,2,3];\n\n    function setter(uint index,uint value) public{\n        students[index]=value;\n    }    \n    function arrayLength() public view returns(uint){\n        return students.length;\n    }\n    \n\n    //dynamic sized array\n\n    uint[] public students;\n\n    function pushNumber(uint number) public{\n        students.push(number); // add indexed++ and numbers accordingly \n    }\n    function popNumber() public{\n        students.pop(); // remove the last array value not indexed value\n    }\n    function arrlength() public view returns(uint){\n       return students.length;\n    } \n\n    // fixed bytes arrays\n\n    bytes2 public b2;\n    bytes1 public b1;\n\n    function setter() public{\n        b1='a';\n        b2='ab';\n        //we can use length function for getting length\n    }\n    //dynamic size array\n\n    bytes public b3='abc';\n//bytes1 is used because we want to have only one index number\n\n    function setelement(uint i) public view returns(bytes1){\n        return b3[i];\n    }\n    \n\n    //struct usage\n\n    struct Student{\n        uint roll;\n        string name;\n    }\n    Student public s1;\n\n    constructor(uint _roll,string memory _name) {\n        s1.roll=_roll;\n        s1.name=_name;\n    }\n\n    function change(uint _roll,string memory _name) public{\n        Student memory new_student=Student({\n            roll:_roll,\n            name:_name\n        });\n        s1=new_student;\n    }\n    \n\n    //mapping\n    //differnece between mapping and arrays is no sequestial indexes in mapping just like arrays.\n\n    mapping(uint=>string) public reg;\n\n    function setter(uint regNo,string memory name)public{\n\n        reg[regNo]=name;\n    }\n    \n\n    //mapping with struct\n\n    struct Student{\n        string  name;\n        uint reg;\n        \n     }\n\n     mapping(uint=>Student) public record;\n         function setter(uint _id,string memory _name,uint _reg) public{\n             record[_id]=Student(_name,_reg);\n         }\n     \n\n     //difference between storage and memory\n\n     string[] public student=['asfund','mirza'];\n\n     function mem() public view{\n         string[] memory  s1=student;\n             s1[0]='kashif';\n//usage of memory will creat new copy and changes index value in that copy not in original student\n     }\n     function stor() public {\n         string[] storage  s1=student;\n            s1[0]='kashif';\n     }\n//storage will hold the original student array and changes original index value\n\n\n    //contract balance\n\n    function bal() public payable{\n                //transfer balance to this contract\n    }\n    function check() public view returns(uint){\n        return address(this).balance; //check contract balance\n    }\n    address payable user=payable(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB);\n\n    function send() public{\n        user.transfer(1 ether);  //send balance to upper given address\n    }\n    */\n\n    \n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/identity.sol": {
				"test": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/identity.sol\":101:4071  contract test{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/identity.sol\":101:4071  contract test{... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202e9fbd4fea0397e3a97e6546720fb1e4fc757923703c1b5b9eda66f2baf969bb64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212202e9fbd4fea0397e3a97e6546720fb1e4fc757923703c1b5b9eda66f2baf969bb64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E SWAP16 0xBD 0x4F 0xEA SUB SWAP8 0xE3 0xA9 PUSH31 0x6546720FB1E4FC757923703C1B5B9EDA66F2BAF969BB64736F6C6343000812 STOP CALLER ",
							"sourceMap": "101:3970:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea26469706673582212202e9fbd4fea0397e3a97e6546720fb1e4fc757923703c1b5b9eda66f2baf969bb64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E SWAP16 0xBD 0x4F 0xEA SUB SWAP8 0xE3 0xA9 PUSH31 0x6546720FB1E4FC757923703C1B5B9EDA66F2BAF969BB64736F6C6343000812 STOP CALLER ",
							"sourceMap": "101:3970:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 4071,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202e9fbd4fea0397e3a97e6546720fb1e4fc757923703c1b5b9eda66f2baf969bb64736f6c63430008120033",
									".code": [
										{
											"begin": 101,
											"end": 4071,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 101,
											"end": 4071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 101,
											"end": 4071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 101,
											"end": 4071,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 101,
											"end": 4071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 101,
											"end": 4071,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/identity.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/identity.sol\":\"test\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/identity.sol\":{\"keccak256\":\"0x6a5172d548d53915f564b3dfb6d0c1eec841b982ac6051b658d3191ab22aedb1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2191635ad2687045e6b4e448bd3f632a4be8bcd9edf997593c32e3cf7f2b425b\",\"dweb:/ipfs/QmWx9qmZ7VujwoBcZxKdr8sWm7rgv2g6y9XX4qXDSkKjai\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/identity.sol": {
				"ast": {
					"absolutePath": "contracts/identity.sol",
					"exportedSymbols": {
						"test": [
							2
						]
					},
					"id": 3,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:29:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "test",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2,
							"linearizedBaseContracts": [
								2
							],
							"name": "test",
							"nameLocation": "110:4:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3,
							"src": "101:3970:0",
							"usedErrors": []
						}
					],
					"src": "33:4038:0"
				},
				"id": 0
			}
		}
	}
}